package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"go-app/graph/model"
	"go-app/service"
)

// AddTest is the resolver for the addTest field.
func (r *mutationResolver) AddTest(ctx context.Context, input model.AddTestInput) (*model.Test, error) {
	return service.AddTest(ctx, input)
}

// AddUser is the resolver for the addUser field.
func (r *mutationResolver) AddUser(ctx context.Context, input model.AddUserInput) (*model.User, error) {
	return service.AddUser(ctx, input)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return service.GetAllUser(ctx)
}

// Tests is the resolver for the tests field.
func (r *queryResolver) Tests(ctx context.Context) ([]*model.Test, error) {
	return service.GetAllTest(ctx)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, name string) (*model.User, error) {
	return service.GetUserByName(ctx, name)
}

// Test is the resolver for the test field.
func (r *queryResolver) Test(ctx context.Context, id int) (*model.Test, error) {
	return service.GetTestByID(ctx, id)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
